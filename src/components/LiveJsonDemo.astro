---
const { src = '/samples/opusdt.sample.json' } = Astro.props;
---
<section class="glass p-6 rounded-xl">
  <div class="flex items-center justify-between mb-3">
    <div class="flex items-center gap-3">
      <h3 class="text-lg font-semibold">Live JSON Demo</h3>
      <span id="status" class="text-xs text-slate-400">Loading…</span>
    </div>
    <div class="flex items-center gap-2">
      <button id="toggleBtn" class="px-3 py-1.5 text-sm rounded-md glass hover:bg-white/10">Collapse</button>
      <button id="copyBtn" class="px-3 py-1.5 text-sm rounded-md bg-brand-500 text-slate-900 hover:bg-brand-400">Copy</button>
    </div>
  </div>
  <div class="flex gap-2 mb-2">
    <button id="tabRaw" class="px-3 py-1.5 text-sm rounded-md bg-white/10">Raw</button>
    <button id="tabTree" class="px-3 py-1.5 text-sm rounded-md hover:bg-white/10">Tree</button>
  </div>
  <div id="viewer">
    <div id="panelRaw">
      <pre class="overflow-auto text-sm max-h-96"><code id="jsonCode" class="language-json">Loading…</code></pre>
    </div>
    <div id="panelTree" class="hidden"></div>
    <p class="text-xs text-slate-400 mt-2">Source: {src}</p>
  </div>
</section>

<script>
  const src = "{src}";
  async function load() {
    try {
      const res = await fetch(src, { cache: 'no-store' });
  const data = await res.json();
  window.__ql_data = data;
  const formatted = JSON.stringify(data, null, 2);
      document.getElementById('jsonCode').textContent = formatted;
      document.getElementById('status').textContent = 'Loaded';
      // Prism highlight after injecting content
      if (window.Prism) {
        window.Prism.highlightElement(document.getElementById('jsonCode'));
      }
    } catch (e) {
      document.getElementById('jsonCode').textContent = 'Failed to load sample JSON';
      document.getElementById('status').textContent = 'Error';
    }
  }
  load();
  document.getElementById('copyBtn')?.addEventListener('click', () => {
    const text = document.getElementById('jsonCode')?.textContent || '';
    navigator.clipboard.writeText(text);
  });
  const viewer = document.getElementById('viewer');
  const toggleBtn = document.getElementById('toggleBtn');
  let open = true;
  toggleBtn?.addEventListener('click', () => {
    open = !open;
    if (viewer) viewer.style.display = open ? 'block' : 'none';
    if (toggleBtn) toggleBtn.textContent = open ? 'Collapse' : 'Expand';
  });

  // Load Prism assets for client-side highlighting
  (function ensurePrism(){
    if (window.Prism) return;
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = 'https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css';
    document.head.appendChild(link);
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js';
    script.onload = () => {
      const lang = document.createElement('script');
      lang.src = 'https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-json.min.js';
      document.body.appendChild(lang);
    };
    document.body.appendChild(script);
  })();

  // Tabs
  const tabRaw = document.getElementById('tabRaw');
  const tabTree = document.getElementById('tabTree');
  const panelRaw = document.getElementById('panelRaw');
  const panelTree = document.getElementById('panelTree');
  function activate(which) {
    if (which === 'tree') {
      panelRaw.classList.add('hidden');
      panelTree.classList.remove('hidden');
      if (!panelTree.dataset.loaded && window.__ql_data) {
        import('./JsonTreeViewer.astro').then(() => {
          // Hydration workaround: inline render via creating a container and populating with a new instance by SSR is not available.
          // Instead, we rebuild a light DOM tree here:
          panelTree.innerHTML = '';
          const data = window.__ql_data;
          const wrap = document.createElement('div');
          function renderTree(node, path = '$') {
            const container = document.createElement('div');
            container.className = 'pl-4 border-l border-white/10 my-1';
            if (Array.isArray(node)) {
              node.forEach((v, i) => container.appendChild(renderEntry(i, v, `${path}[${i}]`)));
            } else if (node && typeof node === 'object') {
              Object.entries(node).forEach(([k, v]) => container.appendChild(renderEntry(k, v, `${path}.${k}`)));
            } else {
              container.textContent = String(node);
            }
            return container;
          }
          function renderEntry(key, value, path) {
            const row = document.createElement('div');
            const isBranch = value && (typeof value === 'object');
            row.className = 'my-1';
            const toggle = document.createElement('button');
            toggle.className = 'mr-2 text-xs px-1 rounded bg-white/10 hover:bg-white/20';
            toggle.textContent = isBranch ? '-' : '·';
            const label = document.createElement('span');
            label.innerHTML = `<span class="text-slate-400">${String(key)}:</span> <span class="text-slate-200">${isBranch ? (Array.isArray(value) ? '[...]' : '{...}') : JSON.stringify(value)}</span>`;
            const copy = document.createElement('button');
            copy.className = 'ml-2 text-xs px-1 rounded bg-brand-500 text-slate-900 hover:bg-brand-400';
            copy.textContent = 'Copy path';
            copy.addEventListener('click', () => navigator.clipboard.writeText(path));
            row.appendChild(toggle);
            row.appendChild(label);
            row.appendChild(copy);
            if (isBranch) {
              const child = renderTree(value, path);
              row.appendChild(child);
              toggle.addEventListener('click', () => {
                const open = child.style.display !== 'none';
                child.style.display = open ? 'none' : 'block';
                toggle.textContent = open ? '+' : '-';
              });
            }
            return row;
          }
          wrap.appendChild(renderTree(data));
          panelTree.appendChild(wrap);
          panelTree.dataset.loaded = '1';
        });
      }
    } else {
      panelTree.classList.add('hidden');
      panelRaw.classList.remove('hidden');
    }
  }
  tabRaw?.addEventListener('click', () => activate('raw'));
  tabTree?.addEventListener('click', () => activate('tree'));
</script>
